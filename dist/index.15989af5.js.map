{"mappings":"ACAA,IAAI,EAAS,EACT,EAAU,EAEV,EAAU,CAAA,EACV,EAAS,EAEb,MAAM,EAAS,SAAS,aAAa,CAAC,WAChC,EAAgB,SAAS,aAAa,CAAC,mBACvC,EAAU,SAAS,aAAa,CAAC,uBACjC,EAAU,SAAS,aAAa,CAAC,uBACjC,EAAY,EAAc,gBAAgB,CAAC,eAEjD,IAAI,EAAY,EAAc,WAAW,CAAG,OAAO,UAAU,CAE7D,MAAM,EAAO,CAAC,EAAO,EAAK,IACjB,EAAQ,AAAC,CAAA,EAAM,CAAA,EAAS,EAG3B,EAAS,KACb,CAAA,EAAU,EAAK,EAAS,EAjBf,MAiBT,EACc,GAAG,CAAA,EAAU,CAAA,EACvB,EAAU,EAAY,GAAG,CAAA,EAAU,CAAvC,EAEA,IAAI,EAAY,EAAU,EAE1B,KAAK,GAAG,CAAC,oBAAqB,CAC5B,OAAQ,CACV,GAEA,sBAAsB,EACxB,EAEA,EAAO,gBAAgB,CAAC,QAAS,AAAA,IAC3B,KAAK,GAAG,CAAC,EAAE,MAAM,EAAI,IAAI,CAAA,GAAU,EAAE,MAAM,AAAN,EAGzC,CAAA,EAAS,KAAK,GAAG,CADjB,EAAS,KAAK,GAAG,CAAC,EAAG,GACK,EAA1B,EAEY,EAAQ,SAAS,CAAC,MAAM,CAAC,YAChC,EAAQ,SAAS,CAAC,GAAG,CAAC,WAC7B,GAEA,EAAO,gBAAgB,CAAC,YAAa,AAAA,IACnC,EAAU,CAAA,EACV,EAAS,EAAE,OAAO,CAClB,EAAO,KAAK,CAAC,MAAM,CAAG,UACxB,GAEA,EAAO,gBAAgB,CAAC,aAAc,KACpC,EAAU,CAAA,CACZ,GAEA,EAAO,gBAAgB,CAAC,UAAW,KACjC,EAAU,CAAA,EACV,EAAO,KAAK,CAAC,MAAM,CAAG,OACtB,EAAU,OAAO,CAAC,AAAC,IACjB,EAAK,KAAK,CAAC,aAAa,CAAG,MAC7B,EACF,GAEA,EAAO,gBAAgB,CAAC,aAAc,KACpC,EAAO,KAAK,CAAC,MAAM,CAAG,MACxB,GAEA,EAAO,gBAAgB,CAAC,YAAa,AAAA,IAC/B,IACF,EAAU,OAAO,CAAC,AAAC,IACjB,EAAK,KAAK,CAAC,aAAa,CAAG,MAC7B,GACA,EAAO,UAAU,EAAI,EAAS,EAAE,OAAO,CACvC,GAAU,EAAS,EAAE,OAAO,CAG5B,CAAA,EAAS,KAAK,GAAG,CAAC,EADlB,EAAS,KAAK,GAAG,CAAC,EAAG,GACrB,EAEY,EAAQ,SAAS,CAAC,MAAM,CAAC,YAChC,EAAQ,SAAS,CAAC,GAAG,CAAC,YAE3B,EAAS,EAAE,OAAO,CAEtB,GAEA,IAgCA,EAAQ,gBAAgB,CAAC,QAAS,KAChC,EAAO,KAAK,CAAC,cAAc,CAAG,SAC9B,EAAO,UAAU,EAAI,EAAU,EAC/B,GAAU,EAAU,EAEpB,CAAA,EAAS,KAAK,GAAG,CAAC,EAAG,EAArB,EAEY,EAAQ,SAAS,CAAC,MAAM,CAAC,YAChC,EAAQ,SAAS,CAAC,GAAG,CAAC,YAC3B,EAAO,KAAK,CAAC,cAAc,CAAG,MAChC,GAEA,EAAQ,gBAAgB,CAAC,QAAS,KAChC,EAAO,KAAK,CAAC,cAAc,CAAG,SAC9B,EAAO,UAAU,EAAI,EAAU,EAC/B,GAAU,EAAU,EAEpB,CAAA,EAAS,KAAK,GAAG,CAAC,EAAQ,EAA1B,EAEY,EAAQ,SAAS,CAAC,MAAM,CAAC,YAChC,EAAQ,SAAS,CAAC,GAAG,CAAC,YAC3B,EAAO,KAAK,CAAC,cAAc,CAAG,MAChC,GAIA,AAFmB,EAAc,gBAAgB,CAAC,uDAEvC,OAAO,CAAC,AAAC,IAClB,EAAU,YAAY,CAAC,YAAa,QACtC","sources":["<anon>","js/slider.js"],"sourcesContent":["let target = 0;\nlet current = 0;\nlet ease = 0.0825;\nlet pressed = false;\nlet mouseX = 0;\nconst slider = document.querySelector(\".swiper\");\nconst sliderWrapper = document.querySelector(\".swiper-wrapper\");\nconst prevBtn = document.querySelector(\".swiper-button-prev\");\nconst nextBtn = document.querySelector(\".swiper-button-next\");\nconst heroCards = sliderWrapper.querySelectorAll(\"a.hero-card\");\nlet maxScroll = sliderWrapper.offsetWidth - window.innerWidth;\nconst lerp = (start, end, factor)=>{\n    return start + (end - start) * factor;\n};\nconst update = ()=>{\n    current = lerp(current, target, ease);\n    if (current < 1) current = 0;\n    if (current > maxScroll - 1) current = maxScroll;\n    let moveRatio = current / maxScroll;\n    gsap.set(\".swiper-scrollbar\", {\n        scaleX: moveRatio\n    });\n    requestAnimationFrame(update);\n};\nslider.addEventListener(\"wheel\", (e)=>{\n    if (Math.abs(e.deltaX) > 10) target += e.deltaX;\n    target = Math.max(0, target);\n    target = Math.min(target, maxScroll);\n    if (target) prevBtn.classList.remove(\"disabled\");\n    else prevBtn.classList.add(\"disabled\");\n});\nslider.addEventListener(\"mousedown\", (e)=>{\n    pressed = true;\n    mouseX = e.clientX;\n    slider.style.cursor = \"grabbing\";\n});\nslider.addEventListener(\"mouseleave\", ()=>{\n    pressed = false;\n});\nslider.addEventListener(\"mouseup\", ()=>{\n    pressed = false;\n    slider.style.cursor = \"grab\";\n    heroCards.forEach((card)=>{\n        card.style.pointerEvents = \"auto\";\n    });\n});\nslider.addEventListener(\"mouseenter\", ()=>{\n    slider.style.cursor = \"grab\";\n});\nslider.addEventListener(\"mousemove\", (e)=>{\n    if (pressed) {\n        heroCards.forEach((card)=>{\n            card.style.pointerEvents = \"none\";\n        });\n        slider.scrollLeft += mouseX - e.clientX;\n        target += mouseX - e.clientX;\n        target = Math.max(0, target);\n        target = Math.min(maxScroll, target);\n        if (target) prevBtn.classList.remove(\"disabled\");\n        else prevBtn.classList.add(\"disabled\");\n        mouseX = e.clientX;\n    }\n});\nupdate();\n// const slideAction = (step, direction) => {\n//   if (direction) {\n//     slider.scrollLeft += step;\n//     target += step;\n//     target = Math.min(target, maxScroll);\n//     if (target) prevBtn.classList.remove('disabled');\n//     else prevBtn.classList.add('disabled');\n//     return;\n//   }\n//   slider.scrollLeft -= step;\n//   target -= step;\n//   target = Math.max(0, target);\n//   if (target) prevBtn.classList.remove('disabled');\n//   else prevBtn.classList.add('disabled');\n// };\n// const scrollInterval = (step, direction, speed, threshold) => {\n//   let cnt = 0;\n//   const giveInterval = setInterval(() => {\n//     slideAction(step, direction);\n//     cnt += step;\n//     if (cnt > threshold) window.clearInterval(giveInterval);\n//   }, speed);\n// };\nprevBtn.addEventListener(\"click\", ()=>{\n    slider.style.scrollBehavior = \"smooth\";\n    slider.scrollLeft -= maxScroll / 2;\n    target -= maxScroll / 2;\n    target = Math.max(0, target);\n    if (target) prevBtn.classList.remove(\"disabled\");\n    else prevBtn.classList.add(\"disabled\");\n    slider.style.scrollBehavior = \"auto\";\n});\nnextBtn.addEventListener(\"click\", ()=>{\n    slider.style.scrollBehavior = \"smooth\";\n    slider.scrollLeft += maxScroll / 2;\n    target += maxScroll / 2;\n    target = Math.min(target, maxScroll);\n    if (target) prevBtn.classList.remove(\"disabled\");\n    else prevBtn.classList.add(\"disabled\");\n    slider.style.scrollBehavior = \"auto\";\n});\nconst draggables = sliderWrapper.querySelectorAll(\"img, svg, p, a, span, h1, h2, h3, h4, h5, h6, .text\");\ndraggables.forEach((draggable)=>{\n    draggable.setAttribute(\"draggable\", \"false\");\n});\n\n//# sourceMappingURL=index.15989af5.js.map\n","let target = 0;\nlet current = 0;\nlet ease = 0.0825;\nlet pressed = false;\nlet mouseX = 0;\n\nconst slider = document.querySelector('.swiper');\nconst sliderWrapper = document.querySelector('.swiper-wrapper');\nconst prevBtn = document.querySelector('.swiper-button-prev');\nconst nextBtn = document.querySelector('.swiper-button-next');\nconst heroCards = sliderWrapper.querySelectorAll('a.hero-card');\n\nlet maxScroll = sliderWrapper.offsetWidth - window.innerWidth;\n\nconst lerp = (start, end, factor) => {\n  return start + (end - start) * factor;\n}\n\nconst update = () => {\n  current = lerp(current, target, ease);\n  if (current < 1) current = 0;\n  if (current > maxScroll - 1) current = maxScroll; \n\n  let moveRatio = current / maxScroll;\n\n  gsap.set('.swiper-scrollbar', {\n    scaleX: moveRatio,\n  });\n\n  requestAnimationFrame(update);\n};\n\nslider.addEventListener('wheel', e => {\n  if (Math.abs(e.deltaX) > 10) target += e.deltaX;\n\n  target = Math.max(0, target);\n  target = Math.min(target, maxScroll);\n\n  if (target) prevBtn.classList.remove('disabled');\n  else prevBtn.classList.add('disabled');\n});\n\nslider.addEventListener('mousedown', e => {\n  pressed = true;\n  mouseX = e.clientX;\n  slider.style.cursor = 'grabbing';\n});\n\nslider.addEventListener('mouseleave', () => {\n  pressed = false;\n});\n\nslider.addEventListener('mouseup', () => {\n  pressed = false;\n  slider.style.cursor = 'grab';\n  heroCards.forEach((card) => {\n    card.style.pointerEvents = 'auto';\n  });\n});\n\nslider.addEventListener('mouseenter', () => {\n  slider.style.cursor = 'grab';\n});\n\nslider.addEventListener('mousemove', e => {\n  if (pressed) {\n    heroCards.forEach((card) => {\n      card.style.pointerEvents = 'none';\n    });\n    slider.scrollLeft += mouseX - e.clientX;\n    target += mouseX - e.clientX;\n\n    target = Math.max(0, target);\n    target = Math.min(maxScroll, target);\n\n    if (target) prevBtn.classList.remove('disabled');\n    else prevBtn.classList.add('disabled');\n\n    mouseX = e.clientX;\n  }\n});\n\nupdate();\n\n// const slideAction = (step, direction) => {\n//   if (direction) {\n//     slider.scrollLeft += step;\n//     target += step;\n\n//     target = Math.min(target, maxScroll);\n\n//     if (target) prevBtn.classList.remove('disabled');\n//     else prevBtn.classList.add('disabled');\n//     return;\n//   }\n//   slider.scrollLeft -= step;\n//   target -= step;\n\n//   target = Math.max(0, target);\n\n//   if (target) prevBtn.classList.remove('disabled');\n//   else prevBtn.classList.add('disabled');\n// };\n\n// const scrollInterval = (step, direction, speed, threshold) => {\n//   let cnt = 0;\n//   const giveInterval = setInterval(() => {\n//     slideAction(step, direction);\n//     cnt += step;\n\n//     if (cnt > threshold) window.clearInterval(giveInterval);\n//   }, speed);\n// };\n\nprevBtn.addEventListener('click', () => {\n  slider.style.scrollBehavior = 'smooth';\n  slider.scrollLeft -= maxScroll/2;\n  target -= maxScroll/2;\n\n  target = Math.max(0, target);\n\n  if (target) prevBtn.classList.remove('disabled');\n  else prevBtn.classList.add('disabled');\n  slider.style.scrollBehavior = 'auto';\n});\n\nnextBtn.addEventListener('click', () => {\n  slider.style.scrollBehavior = 'smooth';\n  slider.scrollLeft += maxScroll/2;\n  target += maxScroll/2;\n\n  target = Math.min(target, maxScroll);\n\n  if (target) prevBtn.classList.remove('disabled');\n  else prevBtn.classList.add('disabled');\n  slider.style.scrollBehavior = 'auto';\n});\n\nconst draggables = sliderWrapper.querySelectorAll('img, svg, p, a, span, h1, h2, h3, h4, h5, h6, .text');\n\ndraggables.forEach((draggable) => {\n  draggable.setAttribute('draggable', 'false');\n});"],"names":["target","current","pressed","mouseX","slider","document","querySelector","sliderWrapper","prevBtn","nextBtn","heroCards","querySelectorAll","maxScroll","offsetWidth","window","innerWidth","lerp","start","end","factor","update","moveRatio","gsap","set","scaleX","requestAnimationFrame","addEventListener","e","Math","abs","deltaX","min","max","classList","remove","add","clientX","style","cursor","forEach","card","pointerEvents","scrollLeft","scrollBehavior","draggables","draggable","setAttribute"],"version":3,"file":"index.15989af5.js.map"}